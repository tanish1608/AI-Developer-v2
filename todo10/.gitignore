# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
import fs from 'fs';
import path from 'path';
import { chat } from "./aiHandler.js";
import { processResponse } from "./fileManager.js";
import { componentPrompt, pagePrompt, apiPrompt, dependencyPrompt, routingPrompt } from '../prompt/index.js';

export async function executePlan(plan, appName, messages) {
  const appFolderPath = '/Users/tanishvardhineni/AI-Developer/react-app'; // Correct path to your app folder

  // Helper function to check if a file exists and return its content
  async function getFileContent(filePath) {
    try {
      if (fs.existsSync(filePath)) {
        return await fs.promises.readFile(filePath, 'utf-8');
      }
      return null; // File doesn't exist
    } catch (error) {
      console.error(`Error reading file ${filePath}:`, error);
      return null;
    }
  }

  // Process components
  if (plan.components && plan.components.length > 0) {
    for (let component of plan.components) {
      console.log(`\nCreating Component: ${component.name} - ${component.description}\n`);

      const componentFilePath = path.join(appFolderPath, 'src', 'components', `${component.name}.js`);
      const existingComponentCode = await getFileContent(componentFilePath);

      let prompt = `${componentPrompt}\n\nPlease generate the code for the component: ${component.name}. ${component.description}`;

      // If the component file exists, include its content for better response
      if (existingComponentCode) {
        prompt += `\nThe current code for ${component.name} (if any) is as follows:\n${existingComponentCode}\n\nPlease enhance or update the code accordingly.`;
      }

      messages.push({
        role: "user",
        content: prompt,
      });

      const aiResponse = await chat(messages);

      // Append AI response to the messages for context
      messages.push({
        role: "assistant",
        content: aiResponse.content,
      });

      // Process the AI response and create the component files
      await processResponse(aiResponse.content, appName);
    }
  }

  // Process pages
  if (plan.pages && plan.pages.length > 0) {
    for (let page of plan.pages) {
      console.log(`\nCreating Page: ${page.name} - ${page.description}\n`);

      const pageFilePath = path.join(appFolderPath, 'src', 'pages', `${page.name}.js`);
      const existingPageCode = await getFileContent(pageFilePath);

      let prompt = `${pagePrompt}\n\nGenerate the code for the page: ${page.name}. ${page.description}`;

      // If the page file exists, include its content for better response
      if (existingPageCode) {
        prompt += `\nThe current code for ${page.name} (if any) is as follows:\n${existingPageCode}\n\nPlease enhance or update the code accordingly.`;
      }

      messages.push({
        role: "user",
        content: prompt,
      });

      const aiResponse = await chat(messages);

      // Append AI response to the messages for context
      messages.push({
        role: "assistant",
        content: aiResponse.content,
      });

      // Process the AI response and create the page files
      await processResponse(aiResponse.content, appName);
    }
  }

  // Process routing setup
  if (plan.routing && plan.routing.length > 0) {
    console.log(`\nSetting up Routing and Navigation`);

    // Add the routing setup to the app.js
    messages.push({
      role: "user",
      content: `${routingPrompt}\n\nGenerate the routing code for React.js using simple JavaScript and CSS. Ensure routing functionality is set up correctly in the App.js file with basic links for navigation.`,
    });

    const aiResponse = await chat(messages);

    // Append AI response to the messages for context
    messages.push({
      role: "assistant",
      content: aiResponse.content,
    });

    // Process the AI response and create the routing setup
    await processResponse(aiResponse.content, appName);
  }
}