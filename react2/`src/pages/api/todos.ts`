import { NextApiRequest, NextApiResponse } from "next";
import { Todo } from "./types";

let todos: Todo[] = [];

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
try {
switch (req.method) {
case "GET":
if (req.query.id) {
const todo = todos.find((todo) => todo.id === req.query.id);
if (!todo) {
return res.status(404).json({ error: "Todo not found" });
}
return res.status(200).json(todo);
}
return res.status(200).json(todos);

case "POST":
const { title, deadline } = req.body;
if (!title || !deadline) {
return res.status(400).json({ error: "Title and deadline are required" });
}
const newTodo: Todo = { id: Date.now().toString(), title, deadline, completed: false };
todos.push(newTodo);
return res.status(201).json(newTodo);

case "PUT":
const { title, deadline, completed } = req.body;
const id = req.query.id;
const todo = todos.find((todo) => todo.id === id);
if (!todo) {
return res.status(404).json({ error: "Todo not found" });
}
todo.title = title;
todo.deadline = deadline;
todo.completed = completed;
return res.status(200).json(todo);

case "DELETE":
const id = req.query.id;
todos = todos.filter((todo) => todo.id !== id);
return res.status(204).end();

default:
res.setHeader("Allow", ["GET", "POST", "PUT", "DELETE"]);
return res.status(405).json({ error: `Method ${req.method} Not Allowed` });
}
} catch (error) {
console.error(error);
return res.status(500).json({ error: "Internal Server Error" });
}
}
